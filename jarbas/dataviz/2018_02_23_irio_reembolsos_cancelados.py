# -*- coding: utf-8 -*-
"""2018-02-23-irio-reembolsos-cancelados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CuvmUc69inLKxnB1eZgpk9oHMC4mqKRZ
"""

from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)
FOLDER = '1riBRLIS0nnv0jcQXQSJ4IgPA83ulooND'
QUERY = f"'{FOLDER}' in parents and trashed=false"
file_list = drive.ListFile({'q': QUERY}).GetList()
for drive_file in file_list:
  download = drive.CreateFile({'id': drive_file['id']})
  download.GetContentFile(drive_file['title'])

import numpy as np
import pandas as pd
import os

data = pd.DataFrame()
current_path = os.getcwd()
temp = pd.read_csv( f'{current_path}/data/reimbursements-2018.csv', low_memory=False)
data = pd.concat([data, temp])
del(temp)
data = data[data['congressperson_id'].notnull()]
data.head()

data['numbers'] = data['numbers'].str.replace('nan', 'None').apply(eval)
data['is_returned'] = data['numbers'].apply(lambda values: None in values)

"""`suspicions` vem do banco de dados do Whistleblower, contendo todos os `document_id`s já tuitados pela @RosieDaSerenata."""

suspicions = [6275999,5965745,5959477,5928154,6162039,6120601,6275873,6163636,6157632,5928885,6138131,6070355,5947568,6021088,5954903,6159014,6269618,6040926,6135710,5989028,5968454,6131147,6094188,6168299,5937487,6129976,6089452,6172455,5992766,6108558,6085288,6103931,6164027,6025169,6094107,5976979,6007815,6048351,6023564,6271280,5936884,5915253,6143527,6156754,6186260,6007194,6064902,5891332,6042623,6009758,6081247,6143281,5973175,5972243,5900891,5918726,6166126,6078244,6064089,5933967,6005676,6052618,5915108,6018694,6115148,6070630,6070444,6070965,6061337,6000035,6140423,6034208,6019800,6026563,5973832,6177303,6175013,6099047,6091669,6041570,6269992,6125373,6176135,5977969,6072107,6105624,6081120,5966796,6005668,6123815,6130411,6040839,5967802,5947569,6041224,5971156,6131021,5914514,5936986,6125806,6059915,5972549,6025034,5968215,6143215,6025141,6011860,6001258,6206057,6111290,5968455,6107099,5997588,6188124,6083508,6005666,5980535,6150097,6033855,6164326,5973213,5904458,5950841,6054771,6042266,6079141,5933132,6101481,6123205,5900463,6183605,5964148,6104416,5986018,6002597,6010644,5895866,6033217,6158300,6099194,5898760,6167838,6112465,5992412,5923404,6084540,5967260,6070200,5926871,6143128,6027869,6085440,6149265,5968416,6152352,6110283,5936379,5999030,6163281,6182642,6070636,6170880,6137167,6144996,5896425,5979198,6116968,6134840,5921672,6065988,5925569,5925558,5943485,6162997,6043283,6110287,6173163,6048960,5967590,6047356,6163275,6145784,6119778,6031065,6119444,6010210,5926947,6034693,6029845,6029733,6020859,5990610,6026119,6022325,5972445,6005840,6064095,6151287,6157568,6149202,6161134,6031182,6204592,6070617,6172103,6135737,6077379,5975444,6152171,6011695,6142991,6142297,6171186,6064591,6168313,6031182,5959454,6135730,6122679,5974172,6084583,5974858,6037826,5968422,5959014,6080562,5927495,6022089,6230493,5990081,6235094,6255203,6249601,6238362,6251140,6213149,6250711,6230051,6204592,6250108,6206703,6248433,6255128,6229716,6194477,6220381,6250534,6196810,6246461,6245679,6186089,6216366,6198183,5918674,6023447,5967113,6095356,6321438,6205655,6112445,6094667,5935923,6307459,6202745,5979664,6282850,6374959,6059996,6329330,5933267,6332561,6073474,5963872,6186581,5987520,6363035,5913864,6382965,5999833,6290251,6079733,6131375,6164037,6330317,6059251,6249096,6375077,6175158,5964674,6138950,6345944,6379046,6136356,6329357,6228769,6321556,5973424,6419615,6142954,6210539,6268725,6332807,6069603,6414165,6241611,6185347,6424712,6365084,5896426,6248425,6337495,6134410,6070614,6057595,5911547,6061894,6362639,6323104,6390851,5946927,6157142,5915876,5900959,5916417,6256763,6001577,6281399,6333464,6142380,6115671,6103719,6344357,6134409,6186342,6381322,5951379,5986399,6222149,5993550,6389436,6382162,6103055,6198066,6059587,5972865,6309991,6164086,6391006,5910788,6102264,5613917,5736642,6383282,2185440,1674871,5612149,5923304,5612046,5841603,5717874,5626761,5878243,5767652,5715017,5628022,5679962,5622917,5617242,5753407,5747758,5816102,5645145,5854628,5689212,5645180,5681942,5712023,5626354,5780006,5679331,5779480,5645157,5645178,5632702,6004407,5636560,5768009,5660685,6413303,5723469,5648201,5789274,5644255,5648203,5778502,5687542,5803750,5689963,5712020,6428705,5611115,5836399,5667249,5654121,5662437,5657307,5837995,5814149,5806157,5639392,5643619,5693504,5760474,5798868,5598500,5645152,5681032,5691849,5828027,5638652,6298819,6382978,5657620,5622608,5719287,5751800,5669410,5612170,5850776,5645169,5746294,5810381,5628929,5856235,5712132,5616426,5847840,6391639,5689826,5799007,5809785,5644130,5738694,5693317,5780003,5712022,5594049,5711999,5666447,5640601,5636479,5596597,5865763,5731483,5719294,5604104,5869270,5610057,5676730,5800171,5665996,5609609,5806659,5752941,5652645,6072558,5926933,5788019,5633707,5751953,5838003,5710397,6347945,5846135,5654825,5780078,5774501,5610681,5648204,5716651,5633148,5761096,5841582,5838001,5780651,5673280,5772427,5907280,5905707,5800378,5660643,5644208,5654457,5986758,5760464,5897262,6164698,6079740,5772929,5597341,5732154,5751982,6431412,5744871,5790047,5654544,5739938,5631367,5679741,5618705,5812924,5752578,5859446,5804809,5645173,5675276,5636046,5716829,5764391,5856248,5626272,5720921,5675257,5773226,5604001,5774124,5689752,5595965,5782856,5648072,5763640,5811957,5760544,5752881,5904265,5818803,5751629,6000538,5811767,5602073,5689807,5597058,5685450,5713719,5751970,5725385,5593569,5782202,5594886,5653263,5736343,5621133,5671689,5857338,5800161,5666417,5809615,5746249,5662553,5671715,5791781,5764386,5811963,5807725,5689269,5704886,5810153,5843235,5818963,5658915,5872515,5712134,5805649,5732164,5856888,5826031,5810237,5767656,5640047,5586290,5728110,5899577,5758365,5707361,5985648,5721515,5671708,5765364,5693808,5592122,5748343,5688322,5819223,5692307,5595884,5795947,5853586,6386702,5664414,5610664,5735473,5739623,5703472,5899275,5738252,5610063,5733667,6406031,5667523,5803692,5805641,6265383,5594029,5864656,5660906,5717827,5643487,5784372,5856752,5610684,5675349,5760511,5836160,5810367,5805668,5809956,5676271,5675756,5644196,5872931,5772240,5645901,5751949,5794188,5604458,5629848,5715011,6434204,5802762,5641141,5830073,6330914,5629962,5762066,5825338,6005324,5703465,5641673,5645177,5749147,5829580,5624416,5642390,5696349,5780009,5728949,5767691,5843275,5713400,5791278,5772669,5850467,5752651,6271311,5610691,5760273,5735134,5701237,5752093,5857822,5601696,5683970,5633779,5736263,5761619,5751961,5610431,5810287,6263896,5881190,6430198,5625852,5683521,5752948,5771833,5862190,5804560,5607664,5804567,5805658,5703370,5760267,5847133,5806160,5798832,5649402,5751600,5596781,5800167,5780727,5627913,5675272,6108554,5631662,5800164,5810156,5675761,5611260,5662375,6040874,6442397]
suspicions = data[data['document_id'].isin(suspicions)]

"""A maior parte das devoluções são referentes a gastos de 2015-2017, o mandato atual."""

def f_stats(df):
    return pd.Series({
        'n': df.shape[0],
        'sum': df['total_net_value'].sum(),
        'congresspeople': df['applicant_id'].unique().shape[0],
        'subquotas': df['subquota_description'].unique().shape[0],
        'n_from_suspicions': df['document_id'].isin(suspicions['document_id']).sum(),
        'n_suspicious_congressperson': df['applicant_id'].isin(suspicions['applicant_id']).sum(),
    })

data.query('is_returned') \
    .groupby('year') \
    .apply(f_stats)
data = data.sample(100)
data = data.to_json(orient='records')

recently_in_office = data.query('year >= 2015')['applicant_id'].unique()
data['recently_in_office'] = data['applicant_id'].isin(recently_in_office)
data['is_suspicious'] = data['document_id'].isin(suspicions['document_id'])
data['is_suspicious_person'] = data['applicant_id'].isin(suspicions['applicant_id'])
data['is_meal'] = data['subquota_description'] == 'Congressperson meal'
data['has_returned_before'] = data['applicant_id'].isin(data.query('is_returned')['applicant_id'].unique())

def f_stats(df):
    meals = df.query('is_meal')
    meals_returned = meals.query('is_returned')
    n_meals = meals.shape[0]
    n_returned = meals_returned.shape[0]
    n_suspicious_returned = meals_returned.query('is_suspicious').shape[0]
    sum_returned = meals_returned['total_net_value'].sum()
    return pd.Series({
        'state': df['state'].iloc[-1],
        'is_suspicious_person': df['is_suspicious_person'].iloc[0],
        'recently_in_office': df['recently_in_office'].iloc[0],
        'n': n_meals,
        'n_returned': n_returned,
        'n_suspicious_returned': n_suspicious_returned,
        'sum_returned': sum_returned,
    })

stats_people = data \
    .groupby('congressperson_name') \
    .apply(f_stats) \
    .query('(n > 0)') \
    .sort_values(['sum_returned'], ascending=[False])
print(stats_people.shape)
stats_people.head(20)

"""Total"""

stats_people.query('~recently_in_office & (sum_returned > 0)').shape

current_term = stats_people.query('recently_in_office')
current_term_and_returned = stats_people.query('recently_in_office  & (sum_returned > 0)')
current_term.shape[0], current_term_and_returned.shape[0], current_term_and_returned.shape[0] / current_term.shape[0]

returned = stats_people.query('(sum_returned > 0)')
current_term_and_returned['sum_returned'].sum()

"""Suspeitas"""

stats_people.reset_index() \
    .groupby('is_suspicious_person') \
    .agg({'sum_returned': np.sum, 'congressperson_name': np.size})

stats_people.query('recently_in_office & is_suspicious_person').shape[0] \
    / stats_people.query('recently_in_office').shape[0]

stats_people.query('is_suspicious_person & ~recently_in_office')

stats_people.query('is_suspicious_person')['sum_returned'].sum(), stats_people['sum_returned'].sum()

stats_people.query('is_suspicious_person')['sum_returned'].sum() / stats_people['sum_returned'].sum()

stats_people.query('(is_suspicious_person) & (sum_returned > 0)').shape

keys = ['state', 'congressperson_name']
returned_wo_suspicion = stats_people.query('(~is_suspicious_person) & (sum_returned > 0)')
print(returned_wo_suspicion.shape)
returned_wo_suspicion.reset_index()[keys + ['sum_returned']].sort_values(keys)

returned_wo_suspicion['sum_returned'].describe()

stats_people['is_suspicious_person'].value_counts()

data.groupby('is_suspicious_person')['total_net_value'].sum() / 1e6

data.query('is_meal & is_returned').groupby('is_suspicious').size()

data.query('is_meal & is_suspicious').groupby('is_returned').size()

data.query('(year >= 2017) & (month > 6)').groupby('has_returned_before')['total_net_value'].sum() / 1e6

data['total_net_value'].mean()

meals = data.query('is_meal')
meals.query('~is_returned')['total_net_value'].mean(), meals.query('is_returned')['total_net_value'].mean()

meals['total_net_value'].sum(), meals.query('is_returned')['total_net_value'].sum()

meals.query('is_returned')['congressperson_id'].unique().shape

meals.query('is_suspicious')['total_net_value'].sum(), meals.query('is_suspicious & is_returned')['total_net_value'].sum()

def f_stats(df):
    _2016_2 = df.query('(year == 2016) & (month > 6)')['total_net_value']
    _2017_2 = df.query('(year == 2017) & (month > 6)')['total_net_value']
    return pd.Series({
        '2016_2': _2016_2.sum(),
        '2016_2_mean': _2016_2.median(),
        '2017_2': _2017_2.sum(),
        '2017_2_mean': _2017_2.median(),
        'diff': _2017_2.sum() - _2016_2.sum(),
        'is_suspicious_person': df['is_suspicious_person'].iloc[0],
        'has_returned_before': df['has_returned_before'].iloc[0],
        'suspicious_and_returned': df['is_suspicious_person'].iloc[0] and df['has_returned_before'].iloc[0],
    })

diff_years = meals \
    .groupby('congressperson_name') \
    .apply(f_stats) \
    .sort_values(['diff'], ascending=[True])
diff_years.head(20)

diff_years.groupby('has_returned_before')['diff'].mean()

diff_years.groupby('suspicious_and_returned')['diff'].mean()

diff_years.head()

diff_years['2016_2_mean'].median(), diff_years['2017_2_mean'].median()

diff_years['2016_2_mean'].mean(), diff_years['2017_2_mean'].mean()

diff_years.groupby('suspicious_and_returned').agg({'2016_2_mean': np.median, '2017_2_mean': np.median})

55.09-49.28, 47.00-43.19

